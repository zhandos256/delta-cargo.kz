import re
import json
import sqlite3
import logging
import textwrap
from typing import Optional

import requests

from config.const import DB_FILE_PATH

LOGIN = "87770153025"
PASSWORD = "123124124g"
LOGIN_URL = "https://emir-cargo.kz/login"
BOT_TOKEN = "your_bot_token"
CHAT_ID = 6970529864


def send_notification(msg: str):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    try:
        requests.post(url, data={'chat_id': CHAT_ID, 'text': msg})
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e)


def init_db():
    conn = sqlite3.connect(DB_FILE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            track TEXT UNIQUE,
            title TEXT,
            added_at TEXT,
            arrived_at TEXT
        )
    ''')
    conn.commit()
    return conn, cursor


def data_handler(data: Optional[list], cursor: sqlite3.Cursor, conn: sqlite3.Connection):
    if not data:
        return

    for item in data:
        track_code = item["barcode"]
        title = item["title"]
        added_at = item["added_at"]

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ warehouse —Å "–¢–†–¶ ¬´–ê–î–ö¬ª" –∏ –¥–∞—Ç–æ–π
        adk_entry = next(
            (h for h in item["history"]
             if "–¢–†–¶ ¬´–ê–î–ö¬ª" in h["warehouse"] and h["date"]),
            None
        )

        arrived_at = adk_entry["date"] if adk_entry else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫ –≤ –±–∞–∑–µ
        cursor.execute('SELECT arrived_at FROM Items WHERE track = ?', (track_code,))
        result = cursor.fetchone()

        if result:
            # –ï—Å–ª–∏ —É–∂–µ –≤ –ë–î, –Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ arrived_at ‚Üí –æ–±–Ω–æ–≤–∏–º –∏ –ø—É—à–Ω–µ–º
            if not result[0] and arrived_at:
                cursor.execute(
                    'UPDATE Items SET arrived_at = ? WHERE track = ?',
                    (arrived_at, track_code)
                )
                conn.commit()

                msg = textwrap.dedent(f"""
                    üì¶ –¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –≤ ADK
                    –¢—Ä–µ–∫-–∫–æ–¥: {track_code}
                    –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
                    –î–∞—Ç–∞: {arrived_at}
                """)
                send_notification(msg.strip())
        else:
            # –í—Å—Ç–∞–≤–∏–º –¥–∞–∂–µ –µ—Å–ª–∏ arrived_at –ø–æ–∫–∞ None ‚Äî –ë–ï–ó –ø—É—à–∞
            cursor.execute(
                'INSERT INTO Items(track, title, added_at, arrived_at) VALUES(?, ?, ?, ?)',
                (track_code, title, added_at, arrived_at)
            )
            conn.commit()

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ ADK ‚Äî –ø—É—à–Ω–µ–º
            if arrived_at:
                msg = textwrap.dedent(f"""
                    üì¶ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ ADK
                    –¢—Ä–µ–∫-–∫–æ–¥: {track_code}
                    –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
                    –î–∞—Ç–∞: {arrived_at}
                """)
                send_notification(msg.strip())


def main_func():
    session = requests.Session()

    # 2. –õ–æ–≥–∏–Ω–∏–º—Å—è
    payload = {
        'login': LOGIN,
        'password': PASSWORD,
    }

    resp = session.post(LOGIN_URL, data=payload)

    if "logout" not in resp.text:
        logging.info("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
        return

    # 3. –ü–∞—Ä—Å–∏–º JSON –∏–∑ this.tracks
    match = re.search(r"this\.tracks\s*=\s*JSON\.parse\('(.+?)'\)", resp.text)
    if not match:
        logging.info("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON —Å —Ç—Ä–µ–∫–∞–º–∏")
        return

    raw = match.group(1)
    decoded = raw.encode('utf-8').decode('unicode_escape')
    data = json.loads(decoded)

    # 4. –†–∞–±–æ—Ç–∞ —Å –ë–î
    conn, cursor = init_db()
    data_handler(data, cursor, conn)
    conn.close()
