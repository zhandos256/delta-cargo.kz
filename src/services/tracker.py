import re
import json
import sqlite3
import logging
from typing import Optional, List, Dict, Tuple, Union
from contextlib import closing
import requests
from requests import Session
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from config.settings import settings

logger = logging.getLogger(__name__)

# –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
TrackData = Dict[str, Union[str, List[Dict[str, str]]]]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
retry_strategy = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[500, 502, 503, 504],
)
adapter = HTTPAdapter(max_retries=retry_strategy)
session = Session()
session.mount("http://", adapter)
session.mount("https://", adapter)

def send_notification(msg: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage"
    payload = {"chat_id": settings.CHAT_ID, "text": msg}
    
    try:
        response = session.post(url, data=payload, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def init_db() -> Tuple[sqlite3.Connection, sqlite3.Cursor]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É Items."""
    conn = sqlite3.connect(settings.DB_FILE_PATH)
    cursor = conn.cursor()
    
    # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("PRAGMA journal_mode=WAL")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            track TEXT UNIQUE,
            title TEXT,
            added_at TEXT,
            arrived_at TEXT
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_track ON Items(track)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_arrived_at ON Items(arrived_at)")
    
    conn.commit()
    return conn, cursor

def data_handler(data: Optional[List[TrackData]], cursor: sqlite3.Cursor, conn: sqlite3.Connection) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–∞—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É."""
    if not data:
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    cursor.execute("BEGIN TRANSACTION")
    
    try:
        for item in data:
            track_code = item.get("barcode")
            title = item.get("title")
            added_at = item.get("added_at")
            
            if not all([track_code, title, added_at]):
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {item}")
                continue

            # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Å "–¢–†–¶ ¬´–ê–î–ö¬ª" –≤ –∏—Å—Ç–æ—Ä–∏–∏
            arrived_at = next(
                (h["date"] for h in item.get("history", []) 
                 if "–¢–†–¶ ¬´–ê–î–ö¬ª" in h.get("warehouse", "") and h.get("date")),
                None,
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–∫–∞ –≤ –±–∞–∑–µ
            cursor.execute("SELECT arrived_at FROM Items WHERE track = ?", (track_code,))
            result = cursor.fetchone()

            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ arrived_at –ø–æ—è–≤–∏–ª—Å—è
                if not result[0] and arrived_at:
                    cursor.execute(
                        "UPDATE Items SET arrived_at = ? WHERE track = ?",
                        (arrived_at, track_code),
                    )
                    send_notification(
                        f"üì¶ –¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –≤ ADK\n"
                        f"–¢—Ä–µ–∫-–∫–æ–¥: {track_code}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                        f"–î–∞—Ç–∞: {arrived_at}"
                    )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    "INSERT OR IGNORE INTO Items (track, title, added_at, arrived_at) VALUES (?, ?, ?, ?)",
                    (track_code, title, added_at, arrived_at),
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ ADK
                if arrived_at:
                    send_notification(
                        f"üì¶ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ ADK\n"
                        f"–¢—Ä–µ–∫-–∫–æ–¥: {track_code}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                        f"–î–∞—Ç–∞: {arrived_at}"
                    )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn.commit()
        
    except Exception as e:
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def main_func() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ª–æ–≥–∏–Ω–∏—Ç—Å—è, –ø–∞—Ä—Å–∏—Ç —Ç—Ä–µ–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É."""
    try:
        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        payload = {"login": settings.LOGIN, "password": settings.PASSWORD}
        resp = session.post(settings.LOGIN_URL, data=payload, timeout=10)
        resp.raise_for_status()

        if "logout" not in resp.text:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: 'logout' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            return

        # –ü–∞—Ä—Å–∏–º JSON
        match = re.search(r"this\.tracks\s*=\s*JSON\.parse\('(.+?)'\)", resp.text)
        if not match:
            logger.error("JSON —Å —Ç—Ä–µ–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        raw = match.group(1)
        try:
            decoded = raw.encode().decode("unicode_escape")
            data = json.loads(decoded)
        except (json.JSONDecodeError, UnicodeDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∞–∑–æ–π
        with closing(sqlite3.connect(settings.DB_FILE_PATH)) as conn:
            with conn:
                cursor = conn.cursor()
                init_db()
                data_handler(data, cursor, conn)
                
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main_func()